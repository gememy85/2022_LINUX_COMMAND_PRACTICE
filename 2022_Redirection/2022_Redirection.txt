
[명령이 작동하는 방법]
output - 1)프로그램의 결과 2)상태 및 오류 메시지
예시 : `ls` 1) 표준출력stdout애이라는 파일에 이 명령어에 대한 결과를 보냄
            2) 표준오류stderr라는 파일에 상태 메시지를 전송

많은 프로그램들이 표준입력(stdin)이라는 곳에서 입력 내용을 가져오며 그것은 기본적으로 키보드에 연결되어 있음

[표준출력 재지정]
I/O 리다이렉션은 출력 방향을 재정의할 수 있음. 이를 위해서 `>` 연산자를 사용한다.
예시 : `ls -l /usr/bin > ls-output.txt`
처음의 입력 명령어의 결과가 ls-output.txt에 적힌 것을 확인할 수 있다. .txt 파일이 없는 상태에서도 가능함

* 만일 `ls -l /bin/usr > ls-output.txt`로 명령어를 입력하게 된다면 어떻게 될까?
에러가 뜨게 된다. 왜냐면 오류 메시지는 표준 출력으로 전달하지 않고 표준 오류로 전송하기 때문이다. 
여기서 표준오류의 출력도 재지정(리다이렉션)하게 되면 파일에 오류가 적히게 할 수 있다.

* 여담으로, `> ls-output.txt`를 입력하면 빈 ls-output.txt가 생성된다. 이건 그냥 트릭임

만일 파일의 내용을 새롭게 덮어쓰는게 아니라 출력 내용을 덧붙이고 싶다면 어떻게 해야 할까?
`ls -l /usr/bin >> ls-output.txt`로 `>>` 명령어를 입력하면 된다. 이렇게 하면 이어쓰기가 가능하다.

[표준오류 재지정]
이때는 리다이렉션 연산자를 쓸 필요가 없다.('>', '>>' 같은 것을 쓸 필요가 없다는 것)
다만, 파일 디스크립터를 참조해야 한다. 프로그램은 번호로 지정된 파일 스트림 중에 어디에라도 출력을 할 수 있다. 
쉘은 내부적으로 표준입출력과 표준오류를 각각 0,1,2번 파일 디스크립터로 표현한다.
표준오류는 파일 디스크립터2와 같기 때문에 아래와 같이 쓴다. 리다이렉션 연산자 바로 앞에 위치하게 해준다.
`ls -l /bin/usr 2> ls-error.txt`

[표준출력과 표준오류를 한 파일로 지정하고 싶은 경우]
출력과 오류를 모두 한 파일에 저장하고 싶을 때가 존재한다. 이때 가능한 2가지 방법이 있다.
1. `ls -l /bin/usr > ls-output.txt 2>&1`
    먼저 표준 출력이 ls-output.txt파일로 재지정되고 2>&1의 입력으로 파일 디스크립터2(표준오류)가 파일 디스크립터1(표준출력)로 재지정되도록 한다.

2. bash의 최신 버전에서 사용 가능한 리다이렉션은 좀더 간소화하는 방법임
    `ls -l /bin/usr &> ls-output.txt`
    이것은 표준출력과 표준오류를 ls-output.txt 파일로 재지정함

[원치 않는 출력을 제거하고 싶을 때]
/dev/null이라는 특수한 파일로 출력 방향을 지정함으로써 오류 및 상태 메시지를 보낸다.

[표준입력 재지정]
cat - 파일 붙이기
cat은 하나 이상의 파일을 읽어 들여서 표준출력으로 그 내용을 복사한다. 
여러 파일을 읽어들일 수 있어서 파일을 하나로 합치는 데에도 사용 가능하다.
`cat movie.mpeg.0* > movie.mpeg`
`cat > lazy_dog.txt` cat 다음에 텍스트를 입력하면 .txt에 입력한 내용이 들어가게 된다. 
cat은 입력된 후 파일을 참조하거나 아무 것도 없으면 키보드 입력을 참조한다.
물론 입력이 끝났을 때는 Ctrl + D 를 눌러준다.
 
lazy_dog.txt의 내용을 다음과 같이 표준입력을 활용해보자.
`cat < lazy_dog.txt`: lazy_dog.txt의 내용이 출력되는 것을 볼 수 있다.


[파이프라인]
`|`를 사용함
명령어의 표준출력을 또다른 명령어의 표준입력과 연결시킬 수 있음
`command1 | command2`
예시 : `ls -l /usr/bin | less`

[필터]
`sort` 명령어는 표준출력의 순서를 재조정해줄 수 있다. 
편리한 것은 알파벳 순으로 볼 수 있다.
예시 : `ls /bin /usr/bin | sort | less` 이렇게 하면 한번에 각 파일의 목록들을 순서대로 동시에 확인할 수 있다. 

`uniq` 명령어는 출력 결과로 나타난 중복된 내용을 삭제해준다. 반대로 중복된 내용을 보고 싶다면 -d 옵션을 사용하면 된다. 
예시 : `ls /bin /usr/bin | sort | uniq -d | less`

`wc`는 word count의 줄임말이다. 파일에 들어있는 단어 및 라인의 개수와 파일의 크기를 표시해준다.
예시 : `wc ls-output.txt`
여기서 출력은 세 개의 숫자인데 포함된 라인 수, 단어의 개수, 파일의 크기를 출력한다. -l 옵션은 라인의 수만 보고 싶을 때 쓸 수 있다.
`ls /bin /usr/bin | sort | uniq | wc -l`

`grep`는 패턴과 일치하는 라인을 출력해준다. 
예시 : grep 패턴
이것은 정규 표현식을 이용하면 굉장히 편리하다.
예시 : `ls /bin /usr/bin | sort | uniq | grep zip`

`head`, `tail`은 파일의 처음 및 끝 부분을 출력하도록 되어 있다. 

`tee`은 표준입력에서 데이터를 읽고, 표준출력과 파일에 출력한다.
이 명령어는 중간 지점의 파이프라인에 있는 내용을 알고 싶을 때 유용하다.
예시 : `ls /usr/bin | tee ls.txt | grep zip`
중간에 ls.txt에 처음의 ls /usr/bin의 표준출력을 .txt에 저장하고 표준출력을 다시 출력했다.